package io.github.scalaquest.core.model.behaviorBased.commons.grounds

import io.github.scalaquest.core.TestsUtils.model._
import io.github.scalaquest.core.model.Direction
import io.github.scalaquest.core.model.behaviorBased.commons.actioning.CActions
import org.scalatest.matchers.should.Matchers
import org.scalatest.wordspec.AnyWordSpec

class CGroundTest extends AnyWordSpec with Matchers {

  "A CGround" when {
    "normally instantiated" should {
      val ground = CGround()
      "three behavior:" +
        "InspectableLocation" +
        "InspectableBag" +
        "Navigable" in {
          ground.behaviors contains InspectableLocation()
          ground.behaviors contains InspectableBag()
          ground.behaviors contains Navigable()
        }
    }

    "instantiated with a single behavior" should {
      val ground = CGround.withSingleExtraBehavior(GenericGroundBehavior())
      "have an extra behavior" in {
        ground.behaviors.size shouldBe 4
      }
    }

    "instantiated with a generics behavior" should {
      val ground = CGround.withGenExtraBehavior({ case (CActions.Go(Direction.East), _) =>
        CReactions.finishGame(true)
      })
      "have extra behaviors generated by triggers" in {
        ground.behaviors.size shouldBe 4
      }
    }
  }
}
